{"version":3,"sources":["serviceWorker.js","util/Spotify.js","component/SearchBar/SearchBar.js","component/Track/Track.js","component/TrackList/TrackList.js","component/SearchResults/SearchResults.js","component/Playlist/Playlist.js","component/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","href","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playListId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","trackURIs","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a7e1936.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const clientID='bf72d615a6e74b65a37337a9e06fc9bb';\r\nconst redirectUri =\"https://ola-mansour.github.io/jammming/\";\r\nlet accessToken;\r\nconst Spotify ={\r\n\r\n\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken;\r\n        } \r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken =accessTokenMatch[1];\r\n            const expiresIn=Number(expiresInMatch[1]);\r\n            //Clear the parameters from the URL, so the app doesn’t try grabbing the access token after it has expired\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken ;\r\n        }else{\r\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location=accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term){\r\n        const accessToken=Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n        {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }\r\n        ).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse =>{\r\n            if(!jsonResponse.tracks){\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track =>({\r\n                id:track.id,\r\n                name:track.name,\r\n                artist:track.artists[0].name,\r\n                album:track.album.name,\r\n                uri:track.uri\r\n            }));\r\n        });\r\n    },\r\n    savePlayList(name,trackUris){\r\n        if(!name || !trackUris.length){\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers ={Authorization :`Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me',{headers:headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse =>{\r\n            userId=jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers:headers,\r\n                method:'POST',\r\n                body:JSON.stringify({name:name})\r\n            }).then(response=> response.json()\r\n            ).then(jsonResponse => {\r\n                const playListId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,{\r\n                    headers:headers,\r\n                    method:'POST',\r\n                    body:JSON.stringify({uris:trackUris})\r\n                })\r\n            })\r\n        })\r\n    }\r\n};\r\n\r\n\r\nexport default Spotify ;","import React from 'react';\r\nimport './SearchBar.css'\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props){\r\n\r\n        super(props);\r\n        this.state={\r\n            term:''\r\n        }\r\n\r\n        this.search=this.search.bind(this);\r\n        this.handleTermChange=this.handleTermChange.bind(this)\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event){\r\n        this.setState({term:event.target.value});\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"SearchBar\">\r\n    <input placeholder=\"Enter A Song, Album, or Artist\"\r\n            onChange={this.handleTermChange} />\r\n    <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n</div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css'\r\nclass Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack=this.addTrack.bind(this);\r\n        this.removeTrack=this.removeTrack.bind(this);\r\n\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else{\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n\r\n    }\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p> {this.props.track.artist} |  {this.props.track.album} </p>\r\n                </div>\r\n                <button className=\"Track-action\"> {this.renderAction()} </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css'\r\nimport Track from './../Track/Track';\r\nclass TrackList extends React.Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"TrackList\">\r\n                {this.props.tracks.map(track =>{\r\n                return    <Track \r\n                    track={track}\r\n                    key={track.id}\r\n                    onAdd={this.props.onAdd}\r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={this.props.isRemoval}\r\n                    />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css'\r\nimport TrackList from './../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"SearchResults\">\r\n    <h2>Results</h2>\r\n    <TrackList tracks={this.props.SearchResults} \r\n                onAdd={this.props.onAdd}\r\n                isRemoval={false}\r\n    />\r\n</div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css'\r\nimport TrackList from './../TrackList/TrackList';\r\nclass Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange=this.handleNameChange.bind(this);\r\n\r\n    }\r\n    handleNameChange(event){\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n        render() { \r\n        return ( \r\n            <div className=\"Playlist\">\r\n    <input defaultValue={\"New Playlist\"}\r\n            onChange={this.handleNameChange}\r\n            />\r\n    <TrackList tracks={this.props.playlistTracks}\r\n                onRemove={this.props.onRemove}\r\n                isRemoval={true}\r\n    />\r\n    <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n</div>\r\n        );\r\n    }\r\n}\r\nexport default Playlist ;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from './../Playlist/Playlist';\nimport Spotify from './../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state= {\n      SearchResults :[],\n    playlistName:'playlistName1',\n    playlistTracks:[]\n    };\n    this.addTrack=this.addTrack.bind(this);\n    this.removeTrack=this.removeTrack.bind(this);\n    this.updatePlaylistName=this.updatePlaylistName.bind(this);\n    this.savePlaylist=this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n\n  };\n\n  addTrack(track){\n    let tracks =this.state.playlistTracks\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } \n  tracks.push(track)\n  this.setState({playlistTracks:tracks});\n  }\n\n  removeTrack(track){\n    let tracks =this.state.playlistTracks\n    tracks=tracks.filter(currentTrack => currentTrack.id!==track.id)\n    this.setState({playlistTracks:tracks})\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist(){\n    const trackURIs =this.state.playlistTracks.map(track => track.uri)\n    Spotify.savePlaylist(this.state.playlistName,trackURIs).then(()=>{\n      this.setState({\n        playlistName:'New playlist Name',\n        playlistTracks:[]\n\n      })\n    })\n\n  }\n\n  search(term){\n    Spotify.search(term).then(SearchResults =>{\n      this.setState({SearchResults:SearchResults})\n    })\n  }\n\n  render() { \n    return (\n      <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={this.search}\n                    />\n  \n        <div className=\"App-playlist\">\n        <SearchResults  SearchResults={this.state.SearchResults}\n                        onAdd={this.addTrack}\n        />\n        <Playlist \n        playlistName={this.state.playlistName}\n        playlistTracks={this.state.playlistTracks}\n        onRemove={this.removeTrack}\n        onNameChange={this.updatePlaylistName}\n        onSave={this.savePlaylist}\n        />\n        </div>\n      </div>\n    </div>\n    );  }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './component/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}